<Project>

  <Target Name="_ComputeServiceWorkerAssetsManifestInputs"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    BeforeTargets="_ResolveBlazorOutputs;_ResolveBlazorFilesToCompress">

    <PropertyGroup>
      <_ServiceWorkerAssetsManifestIntermediateOutputPath>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory), $(_BlazorIntermediateOutputPath)))$(ServiceWorkerAssetsManifest)</_ServiceWorkerAssetsManifestIntermediateOutputPath>
      <_ServiceWorkerAssetsManifestFullPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)/$(_ServiceWorkerAssetsManifestIntermediateOutputPath)'))</_ServiceWorkerAssetsManifestFullPath>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorOutputWithTargetPath
        Include="$(_ServiceWorkerAssetsManifestFullPath)"
        TargetOutputPath="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />

      <_ManifestStaticWebAsset Include="$(_ServiceWorkerAssetsManifestFullPath)">
        <SourceType></SourceType>
        <SourceId>$(PackageId)</SourceId>
        <ContentRoot>$([MSBuild]::NormalizeDirectory('$(TargetDir)wwwroot\'))</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
        <RelativePath>$(ServiceWorkerAssetsManifest)</RelativePath>
      </_ManifestStaticWebAsset>

      <StaticWebAsset Include="@(_ManifestStaticWebAsset)" />
      <_CompressionCandidate Include="@(_ManifestStaticWebAsset)" />
      <_CompressionCandidateWithIntegrity Include="@(_ManifestStaticWebAsset)">
        <InputSource>$(_ServiceWorkerAssetsManifestFullPath)</InputSource>
      </_CompressionCandidateWithIntegrity>

    </ItemGroup>

  </Target>

  <UsingTask TaskName="GenerateServiceWorkerAssetsManifest" AssemblyFile="$(_BlazorTasksPath)" />

  <Target Name="_WriteServiceWorkerAssetsManifest"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    Inputs="@(ServiceWorkerAssetsManifestItem)"
    Outputs="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
    BeforeTargets="_ComputeManifestIntegrity"
    DependsOnTargets="ResolveStaticWebAssetsInputs;_GenerateServiceWorkerIntermediateFiles">

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      AssetsWithHashes="@(_ServiceWorkerAssetsManifestItemWithHash)"
      OutputPath="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <FileWrites Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_ComputeManifestIntegrity"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    BeforeTargets="_BlazorStaticWebAssetsCopyGeneratedFilesToOutputDirectory;_GzipCompressBlazorApplicationFiles">

    <GetFileHash Files="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerManifestWithHash" />
    </GetFileHash>

    <ItemGroup>

      <_ServiceWorkerManifestWithIntegrity Include="@(_ServiceWorkerManifestWithHash)">
        <Integrity>%(FileHash)</Integrity>
        <IntegrityFile>$(IntermediateOutputPath)integrity\$([System.String]::Copy('%(FileHash)').Replace('/','-').Replace('+','_')).hash</IntegrityFile>
      </_ServiceWorkerManifestWithIntegrity>

      <FileWrites Include="%(_ServiceWorkerManifestWithIntegrity.IntegrityFile)" />

    </ItemGroup>

    <WriteLinesToFile Lines="%(_ServiceWorkerManifestWithIntegrity.Integrity)" File="%(_ServiceWorkerManifestWithIntegrity.IntegrityFile)" WriteOnlyWhenDifferent="true" Overwrite="true" />

    <PropertyGroup>
      <_ServiceWorkerManifestIntegrityFile>$(IntermediateOutputPath)integrity\$([System.String]::Copy('%(_ServiceWorkerManifestWithIntegrity.FileHash)').Replace('/','-').Replace('+','_')).hash</_ServiceWorkerManifestIntegrityFile>
    </PropertyGroup>

    <ItemGroup>
      <_GzipFileToPatch Include="@(_GzipBlazorFileToCompress)" Condition="'%(Identity)' == '$(_ServiceWorkerAssetsManifestFullPath)'" KeepDuplicates="false">
        <InputSource>$(_ServiceWorkerManifestIntegrityFile)</InputSource>
      </_GzipFileToPatch>

      <_GzipBlazorFileToCompress Remove="@(_GzipFileToPatch)" />
      <_GzipBlazorFileToCompress Include="@(_GzipFileToPatch)" />

      <_BrotliFileToPatch Include="@(_BrotliBlazorFileToCompress)" Condition="'%(Identity)' == '$(_ServiceWorkerAssetsManifestFullPath)'" KeepDuplicates="false">
        <InputSource>$(_ServiceWorkerManifestIntegrityFile)</InputSource>
      </_BrotliFileToPatch>

      <_BrotliBlazorFileToCompress Remove="@(_BrotliFileToPatch)" />
      <_BrotliBlazorFileToCompress Include="@(_BrotliFileToPatch)" />
    </ItemGroup>

  </Target>

  <Target Name="_ComputeServiceWorkerAssetsManifestFileHashes"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    DependsOnTargets="ResolveStaticWebAssetsInputs;_BlazorComputeOtherAssetsIntegrity">

    <ItemGroup>
      <ServiceWorkerAssetsManifestItem
        Include="%(StaticWebAsset.Identity)"
        Condition="'%(RelativePath)' != '$(ServiceWorkerAssetsManifest)'">
        <AssetUrl>$([System.String]::Copy('$([System.String]::Copy('%(StaticWebAsset.BasePath)').TrimEnd('/'))/%(StaticWebAsset.RelativePath)').Replace('\','/').TrimStart('/'))</AssetUrl>
      </ServiceWorkerAssetsManifestItem>

      <!-- Don't include compressed files in the manifest, since their existence is transparent to the client -->
      <ServiceWorkerAssetsManifestItem Remove="@(_CompressedStaticWebAsset->'%(FullPath)')" />

      <!-- Don't include the service worker files in the manifest, as the service worker doesn't need to fetch itself -->
      <ServiceWorkerAssetsManifestItem Remove="%(_ServiceWorkerIntermediateFile.FullPath)" />

      <_ServiceWorkerExclude Include="@(_StaticWebAssetIntegrity)" />
      <_ServiceWorkerItemBase Include="@(ServiceWorkerAssetsManifestItem)" />
      <_ServiceWorkerItemBase Remove="@(_ServiceWorkerExclude)" />
      <_ServiceWorkerItemHash Include="@(ServiceWorkerAssetsManifestItem)" />
      <_ServiceWorkerItemHash Remove="@(_ServiceWorkerItemBase)" />
      <_ServiceWorkerAssetsManifestItemWithHash Include="%(Identity)">
        <AssetUrl>@(_ServiceWorkerItemHash->'%(AssetUrl)')</AssetUrl>
        <Integrity>@(_StaticWebAssetIntegrity->'%(Integrity)')</Integrity>
      </_ServiceWorkerAssetsManifestItemWithHash>

    </ItemGroup>
  </Target>

  <Target Name="_BlazorComputeOtherAssetsIntegrity" Condition="'$(ServiceWorkerAssetsManifest)' != ''">
    <ItemGroup>
      <_StaticWebAssetsWithoutHash Include="@(StaticWebAsset)" Condition="'%(SourceType)' != '' or '%(ContentRoot)' == '$(_BlazorCurrentProjectWWWroot)'" />
      <_StaticWebAssetsWithoutHash Remove="@(_StaticWebAssetIntegrity)" />
    </ItemGroup>

    <GetFileHash Files="@(_StaticWebAssetsWithoutHash)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_StaticWebAssetHash" />
    </GetFileHash>

    <ItemGroup>
      <_StaticWebAssetIntegrity Include="%(_StaticWebAssetHash.Identity)">
        <Integrity>%(_StaticWebAssetHash.FileHash)</Integrity>
      </_StaticWebAssetIntegrity>
    </ItemGroup>

  </Target>


  <!--
    Compute a default ServiceWorkerAssetsManifestVersion value by combining all the asset hashes.
    This is useful because then clients will only have to repopulate caches if the contents have changed.
  -->
  <Target Name="_ComputeDefaultServiceWorkerAssetsManifestVersion"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    DependsOnTargets="_ComputeServiceWorkerAssetsManifestFileHashes">
    <PropertyGroup>
      <_CombinedHashIntermediatePath>$(_BlazorIntermediateOutputPath)serviceworkerhashes.txt</_CombinedHashIntermediatePath>
    </PropertyGroup>

    <!-- Neither of these should ever happen, but if we do we want to know about it. -->
    <Error Text="Cannot compute service worker assets manifest version, because no service worker manifest items were defined."
           Condition="'@(_ServiceWorkerAssetsManifestItemWithHash)' == ''" />
    <Error Text="While computing service worker assets manifest version, did not find any dll entries in service worker assets manifest."
           Condition="'@(_ServiceWorkerAssetsManifestItemWithHash->WithMetadataValue('Extension', '.dll'))' == ''" />

    <WriteLinesToFile
      File="$(_CombinedHashIntermediatePath)"
      Lines="@(_ServiceWorkerAssetsManifestItemWithHash->'%(FileHash)')"
      WriteOnlyWhenDifferent="true"
      Overwrite="true" />

    <GetFileHash Files="$(_CombinedHashIntermediatePath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestCombinedHash" />
    </GetFileHash>

    <PropertyGroup>
      <ServiceWorkerAssetsManifestVersion Condition="'$(ServiceWorkerAssetsManifestVersion)' == ''">$([System.String]::Copy('%(_ServiceWorkerAssetsManifestCombinedHash.FileHash)').Substring(0, 8))</ServiceWorkerAssetsManifestVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_OmitServiceWorkerContent"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    BeforeTargets="AssignTargetPaths;ResolveCurrentProjectStaticWebAssetsInputs">

    <ItemGroup>
      <!-- Don't emit the service worker source files to the output -->
      <Content Remove="@(ServiceWorker)" />
      <Content Remove="@(ServiceWorker->'%(PublishedContent)')" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveServiceWorkerOutputs"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    BeforeTargets="_ResolveBlazorOutputs"
    DependsOnTargets="_ComputeServiceWorkerOutputs">

    <ItemGroup>
      <_BlazorFileCompressExclusion Include="@(_ServiceWorkerIntermediateFile->'%(FullPath)')" />

      <_ServiceWorkerStaticWebAsset Include="@(_ServiceWorkerIntermediateFile->'%(FullPath)')">
        <SourceType></SourceType>
        <SourceId>$(PackageId)</SourceId>
        <ContentRoot>$([MSBuild]::NormalizeDirectory('$(TargetDir)wwwroot\'))</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
        <RelativePath>%(TargetOutputPath)</RelativePath>
      </_ServiceWorkerStaticWebAsset>

      <StaticWebAsset Include="@(_ServiceWorkerStaticWebAsset)" />

    </ItemGroup>
  </Target>

  <Target Name="_ComputeServiceWorkerOutputs"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''">

    <ItemGroup>
      <!-- Figure out where we're getting the content for each @(ServiceWorker) entry, depending on whether there's a PublishedContent value -->
      <_ServiceWorkerIntermediateFile Include="@(ServiceWorker->'$(IntermediateOutputPath)blazor\serviceworkers\%(Identity)')">
        <ContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' != ''">%(ServiceWorker.PublishedContent)</ContentSourcePath>
        <ContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' == ''">%(ServiceWorker.Identity)</ContentSourcePath>
        <TargetOutputPath>%(ServiceWorker.Identity)</TargetOutputPath>
        <TargetOutputPath Condition="$([System.String]::Copy('%(ServiceWorker.Identity)').Replace('\','/').StartsWith('wwwroot/'))">$([System.String]::Copy('%(ServiceWorker.Identity)').Substring(8))</TargetOutputPath>
      </_ServiceWorkerIntermediateFile>
    </ItemGroup>
  </Target>

  <Target Name="_GenerateServiceWorkerIntermediateFiles"
    Condition="'$(ServiceWorkerAssetsManifest)' != ''"
    Inputs="@(_ServiceWorkerIntermediateFile->'%(ContentSourcePath)'); $(_CombinedHashIntermediatePath)"
    Outputs="@(_ServiceWorkerIntermediateFile)"
    DependsOnTargets="_ComputeDefaultServiceWorkerAssetsManifestVersion">
    <Copy SourceFiles="%(_ServiceWorkerIntermediateFile.ContentSourcePath)" DestinationFiles="%(_ServiceWorkerIntermediateFile.Identity)" />
    <WriteLinesToFile
      File="%(_ServiceWorkerIntermediateFile.Identity)"
      Lines="/* Manifest version: $(ServiceWorkerAssetsManifestVersion) */"
      Condition="'$(ServiceWorkerAssetsManifestVersion)' != ''" />
    <ItemGroup>
      <FileWrites Include="%(_ServiceWorkerIntermediateFile.Identity)" />
    </ItemGroup>
  </Target>

</Project>
