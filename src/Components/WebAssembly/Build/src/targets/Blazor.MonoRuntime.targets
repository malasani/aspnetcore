<Project>
  <UsingTask TaskName="BlazorGetFileHash" AssemblyFile="$(_BlazorTasksPath)" />

  <PropertyGroup>
    <BlazorWebAssemblyEnableLinking Condition="'$(BlazorWebAssemblyEnableLinking)' == '' AND '$(Configuration)' != 'Debug'">true</BlazorWebAssemblyEnableLinking>
    <BlazorWebAssemblyEnableLinking Condition="'$(BlazorWebAssemblyEnableLinking)' == ''">false</BlazorWebAssemblyEnableLinking>
  </PropertyGroup>

  <Target
    Name="_PrepareBlazorOutputs"
    DependsOnTargets="_ResolveBlazorInputs;_ResolveBlazorOutputs;_GenerateBlazorBootJson;_GenerateBlazorBootJsonIntegrity">
  </Target>

  <Target Name="_ResolveBlazorInputs" DependsOnTargets="ResolveReferences;ResolveRuntimePackAssets">
    <Error Text="BlazorLinkOnBuild has been renamed to BlazorWebAssemblyEnableLinking. Please update your project files to use the new property."
           Condition="'$(BlazorLinkOnBuild)' != ''" />

    <PropertyGroup>
      <!-- /obj/<<configuration>>/<<targetframework>>/blazor -->
      <_BlazorIntermediateOutputPath>$(IntermediateOutputPath)blazor\</_BlazorIntermediateOutputPath>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker.descriptor.xml -->
      <_GeneratedBlazorLinkerDescriptor>$(_BlazorIntermediateOutputPath)linker.descriptor.xml</_GeneratedBlazorLinkerDescriptor>

      <_TypeGranularityLinkerDescriptor>$(_BlazorIntermediateOutputPath)linker.typegranularityconfig.xml</_TypeGranularityLinkerDescriptor>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker/ -->
      <_BlazorIntermediateLinkerOutputPath>$(_BlazorIntermediateOutputPath)linker/</_BlazorIntermediateLinkerOutputPath>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/blazor.boot.json -->
      <_BlazorBootJsonIntermediateOutputPath>$(_BlazorIntermediateOutputPath)$(_BlazorBootJsonName)</_BlazorBootJsonIntermediateOutputPath>

      <_BlazorLinkerOutputCache>$(_BlazorIntermediateOutputPath)linker.output</_BlazorLinkerOutputCache>

      <_BlazorApplicationAssembliesCacheFile>$(_BlazorIntermediateOutputPath)unlinked.output</_BlazorApplicationAssembliesCacheFile>
    </PropertyGroup>

    <!--
      When running from Desktop MSBuild, DOTNET_HOST_PATH is not set.
      In this case, explicitly specify the path to the dotnet host.
    -->
    <PropertyGroup Condition=" '$(DOTNET_HOST_PATH)' == '' ">
      <_DotNetHostDirectory>$(NetCoreRoot)</_DotNetHostDirectory>
      <_DotNetHostFileName>dotnet</_DotNetHostFileName>
      <_DotNetHostFileName Condition=" '$(OS)' == 'Windows_NT' ">dotnet.exe</_DotNetHostFileName>
    </PropertyGroup>

    <ItemGroup>
      <_WebAssemblyBCLFolder Include="
        $(ComponentsWebAssemblyBaseClassLibraryPath);
        $(ComponentsWebAssemblyBaseClassLibraryFacadesPath);
        $(ComponentsWebAssemblyFrameworkPath)" />

      <_WebAssemblyBCLAssembly Include="%(_WebAssemblyBCLFolder.Identity)*.dll" />

      <_BlazorConfigFile Include="wwwroot\appsettings*.json" />
    </ItemGroup>

    <!--
      Calculate the assemblies that act as inputs to calculate assembly closure. Based on _ComputeAssembliesToPostprocessOnPublish which is used as input to SDK's linker
      https://github.com/dotnet/sdk/blob/d597e7b09d7657ba4e326d6734e14fcbf8473564/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L864-L873
    -->
    <ItemGroup>
      <!-- Assemblies from packages -->
      <_BlazorManagedRuntimeAssembly Include="@(RuntimeCopyLocalItems)" />

      <!-- Assemblies from other references -->
      <_BlazorUserRuntimeAssembly Include="@(ReferencePath->WithMetadataValue('CopyLocal', 'true'))"  />
      <_BlazorUserRuntimeAssembly Include="@(ReferenceDependencyPaths->WithMetadataValue('CopyLocal', 'true'))" />

      <_BlazorManagedRuntimeAssembly Include="@(_BlazorUserRuntimeAssembly)" />
      <_BlazorManagedRuntimeAssembly Include="@(IntermediateAssembly)" />
    </ItemGroup>

    <MakeDir Directories="$(_BlazorIntermediateOutputPath)" />
  </Target>

  <UsingTask TaskName="BlazorWriteSatelliteAssemblyFile" AssemblyFile="$(_BlazorTasksPath)" />
  <UsingTask TaskName="BlazorReadSatelliteAssemblyFile" AssemblyFile="$(_BlazorTasksPath)" />

  <Target Name="_ResolveBlazorOutputs" DependsOnTargets="_ResolveBlazorOutputsWhenLinked;_ResolveBlazorOutputsWhenNotLinked">
    <!--
      These are the items calculated as the closure of the runtime assemblies, either by calling the linker
      or by calling our custom ResolveBlazorRuntimeDependencies task if the linker was disabled. Other than
      satellite assemblies, this should include all assemblies needed to run the application.
    -->
    <ItemGroup>
      <_BlazorJSFile Include="$(_BlazorJSPath)" />
      <_BlazorJSFile Include="$(_BlazorJSMapPath)" Condition="Exists('$(_BlazorJSMapPath)')" />

      <_DotNetWasmRuntimeFile Include="$(ComponentsWebAssemblyRuntimePath)*"/>
      <_DotNetWasmRuntimeFile
        Remove="%(Identity)"
        Condition="'$(BlazorEnableTimeZoneSupport)' == 'false' AND '%(FileName)%(Extension)' == 'dotnet.timezones.dat'" />

      <!--
        ReferenceCopyLocalPaths includes all files that are part of the build out with CopyLocalLockFileAssemblies on.
        Remove assemblies that are inputs to calculating the assembly closure. Instead use the resolved outputs, since it is the minimal set.

        ReferenceCopyLocalPaths also includes satellite assemblies from referenced projects but are inexpicably missing
        any metadata that might allow them to be differentiated. We'll explicitly add those
        to _BlazorOutputWithTargetPath so that satellite assemblies from packages, the current project and referenced project
        are all treated the same.
       -->
      <_BlazorCopyLocalPaths Include="@(ReferenceCopyLocalPaths)"
                             Exclude="@(_BlazorManagedRuntimeAssembly);@(ReferenceSatellitePaths)"
                             Condition="'%(Extension)' == '.dll'" />

      <_BlazorCopyLocalPaths Include="@(IntermediateSatelliteAssembliesWithTargetPath)">
        <DestinationSubDirectory>%(IntermediateSatelliteAssembliesWithTargetPath.Culture)\</DestinationSubDirectory>
      </_BlazorCopyLocalPaths>

      <_BlazorOutputWithTargetPath Include="@(_BlazorCopyLocalPaths)">
        <!-- This group is for satellite assemblies. We set the resource name to include a path, e.g. "fr\\SomeAssembly.resources.dll" -->
        <BootManifestResourceType Condition="'%(_BlazorCopyLocalPaths.Extension)' == '.pdb'">pdb</BootManifestResourceType>
        <BootManifestResourceType Condition="'%(_BlazorCopyLocalPaths.Culture)' == '' AND '%(_BlazorCopyLocalPaths.Extension)' == '.dll'">assembly</BootManifestResourceType>
        <BootManifestResourceType Condition="'%(_BlazorCopyLocalPaths.Culture)' != '' AND '%(_BlazorCopyLocalPaths.Extension)' == '.dll'">satellite</BootManifestResourceType>
        <BootManifestResourceName>%(_BlazorCopyLocalPaths.DestinationSubDirectory)%(FileName)%(Extension)</BootManifestResourceName>
        <TargetOutputPath>$(_BlazorRuntimeBinOutputPath)%(_BlazorCopyLocalPaths.DestinationSubDirectory)%(FileName)%(Extension)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>

      <_BlazorOutputWithTargetPath Include="@(ReferenceSatellitePaths)">
        <Culture>$([System.String]::Copy('%(ReferenceSatellitePaths.DestinationSubDirectory)').Trim('\').Trim('/'))</Culture>
        <BootManifestResourceType>satellite</BootManifestResourceType>
        <BootManifestResourceName>%(ReferenceSatellitePaths.DestinationSubDirectory)%(FileName)%(Extension)</BootManifestResourceName>
        <TargetOutputPath>$(_BlazorRuntimeBinOutputPath)%(ReferenceSatellitePaths.DestinationSubDirectory)%(FileName)%(Extension)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>

      <_BlazorOutputWithTargetPath Include="@(_BlazorResolvedAssembly)">
        <BootManifestResourceType Condition="'%(Extension)' == '.dll'">assembly</BootManifestResourceType>
        <BootManifestResourceType Condition="'%(Extension)' == '.pdb'">pdb</BootManifestResourceType>
        <BootManifestResourceName>%(FileName)%(Extension)</BootManifestResourceName>
        <TargetOutputPath>$(_BlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>

      <_BlazorOutputWithTargetPath Include="@(_DotNetWasmRuntimeFile)">
        <TargetOutputPath>$(_BlazorRuntimeWasmOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <BootManifestResourceType>runtime</BootManifestResourceType>
        <BootManifestResourceName>%(FileName)%(Extension)</BootManifestResourceName>
      </_BlazorOutputWithTargetPath>

      <_BlazorOutputWithTargetPath Include="@(_BlazorJSFile)">
        <TargetOutputPath>$(_BaseBlazorRuntimeOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>

      <_BlazorWriteSatelliteAssembly Include="@(_BlazorOutputWithTargetPath->WithMetadataValue('BootManifestResourceType', 'satellite'))" />
    </ItemGroup>

    <!--
      When building with BuildingProject=false, satellite assemblies do not get resolved (the ones for the current project and the one for
      referenced project). BuildingProject=false is typically set for referenced projects when building inside VisualStudio.
      To workaround this, we'll stash metadata during a regular build, and rehydrate from it when BuildingProject=false.
    -->

    <PropertyGroup>
      <_BlazorSatelliteAssemblyStashFile>$(_BlazorIntermediateOutputPath)blazor.satelliteasm.props</_BlazorSatelliteAssemblyStashFile>
    </PropertyGroup>

    <BlazorWriteSatelliteAssemblyFile
      SatelliteAssembly="@(_BlazorWriteSatelliteAssembly)"
      WriteFile="$(_BlazorSatelliteAssemblyStashFile)"
      Condition="'$(BuildingProject)' == 'true' AND '@(_BlazorWriteSatelliteAssembly->Count())' != '0'" />

    <Delete
      Files="$(_BlazorSatelliteAssemblyStashFile)"
      Condition="'$(BuildingProject)' == 'true' AND '@(_BlazorWriteSatelliteAssembly->Count())' == '0' and EXISTS('$(_BlazorSatelliteAssemblyStashFile)')" />

    <BlazorReadSatelliteAssemblyFile
        ReadFile="$(_BlazorSatelliteAssemblyStashFile)"
        Condition="'$(BuildingProject)' != 'true' AND EXISTS('$(_BlazorSatelliteAssemblyStashFile)')">
      <Output TaskParameter="SatelliteAssembly" ItemName="_BlazorReadSatelliteAssembly" />
    </BlazorReadSatelliteAssemblyFile>

    <ItemGroup>
      <FileWrites Include="$(_BlazorSatelliteAssemblyStashFile)" Condition="Exists('$(_BlazorSatelliteAssemblyStashFile)')" />
    </ItemGroup>

    <ItemGroup Condition="'@(_BlazorReadSatelliteAssembly->Count())' != '0'">
      <!-- We've imported a previously stashed file. Let's turn in to a _BlazorOutputWithTargetPath -->
      <_BlazorOutputWithTargetPath Include="@(_BlazorReadSatelliteAssembly)">
        <BootManifestResourceType>satellite</BootManifestResourceType>
        <BootManifestResourceName>%(_BlazorReadSatelliteAssembly.DestinationSubDirectory)%(FileName)%(Extension)</BootManifestResourceName>
        <TargetOutputPath>$(_BlazorRuntimeBinOutputPath)%(_BlazorReadSatelliteAssembly.DestinationSubDirectory)%(FileName)%(Extension)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>
    </ItemGroup>

    <!--
      We need to know at build time (not publish time) whether or not to include pdbs in the
      blazor.boot.json file, so this is controlled by the BlazorEnableDebugging flag, whose
      default value is determined by the build configuration.
    -->
    <ItemGroup Condition="'$(BlazorEnableDebugging)' != 'true'">
      <_BlazorOutputWithTargetPath Remove="@(_BlazorOutputWithTargetPath)" Condition="'%(Extension)' == '.pdb'" />
    </ItemGroup>

    <ItemGroup>
      <_ExistingBlazorOutputWithTargetPath Include="@(_BlazorOutputWithTargetPath)" Condition="Exists('%(FullPath)')" />
    </ItemGroup>

    <BlazorGetFileHash Files="@(_ExistingBlazorOutputWithTargetPath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorOutputWithHash" />
    </BlazorGetFileHash>

    <ItemGroup>
      <_BlazorOutputWithIntegrity Include="@(_BlazorOutputWithHash)">
        <Integrity>%(_BlazorOutputWithHash.FileHash)</Integrity>
        <IntegrityFile>$(IntermediateOutputPath)integrity\$([System.String]::Copy('%(FileHash)').Replace('/','-').Replace('+','_')).hash</IntegrityFile>
      </_BlazorOutputWithIntegrity>

      <_BlazorOutputWithTargetPath Remove="@(_BlazorOutputWithIntegrity)" />
      <_BlazorOutputWithTargetPath Include="@(_BlazorOutputWithIntegrity)" RemoveMetadata="FileHash;FileHashAlgorithm" />

      <MakeDir Directories="$(IntermediateOutputPath)integrity" />
    </ItemGroup>

    <WriteLinesToFile Lines="%(_BlazorOutputWithIntegrity.Integrity)" File="%(_BlazorOutputWithIntegrity.IntegrityFile)" WriteOnlyWhenDifferent="true" Overwrite="true" />

    <ItemGroup>
      <FileWrites Include="%(_BlazorOutputWithIntegrity.IntegrityFile)" />
    </ItemGroup>

  </Target>

  <!--
  Linker enabled part of the pipeline:

  * If there are no descriptors defined, generate a new linker descriptor.
  * Invoke the linker and write linked files to a well-known directory.
  * Collect the outputs of the linker.
  -->

  <Target
    Name="_ResolveBlazorOutputsWhenLinked"
    Condition="'$(BlazorWebAssemblyEnableLinking)' == 'true'"
    DependsOnTargets="_PrepareBlazorLinkerInputs;_GenerateBlazorLinkerDescriptor;_GenerateTypeGranularLinkerDescriptor;_LinkBlazorApplication">

    <!-- _BlazorLinkerOutputCache records files linked during the last incremental build of the target. Read the contents and assign linked files to be copied to the output. -->
    <ReadLinesFromFile File="$(_BlazorLinkerOutputCache)">
      <Output TaskParameter="Lines" ItemName="_BlazorResolvedAssembly"/>
    </ReadLinesFromFile>
  </Target>

  <Target Name="_PrepareBlazorLinkerInputs">
    <ItemGroup>
      <_BlazorRuntimeCopyLocalItems Include="@(RuntimeCopyLocalItems)" />

      <!--
        Any assembly from a package reference that starts with System. file name is allowed to be linked.
        Assemblies from Microsoft.AspNetCore and Microsoft.Extensions, are also linked but with TypeGranularity.
      -->
      <_BlazorRuntimeCopyLocalItems IsLinkable="true" Condition="$([System.String]::Copy('%(Filename)').StartsWith('System.'))" />
      <_BlazorRuntimeCopyLocalItems IsLinkable="true" TypeGranularity="true" Condition="$([System.String]::Copy('%(Filename)').StartsWith('Microsoft.AspNetCore.'))" />
      <_BlazorRuntimeCopyLocalItems IsLinkable="true" TypeGranularity="true" Condition="$([System.String]::Copy('%(Filename)').StartsWith('Microsoft.Extensions.'))" />

      <_BlazorAssemblyToLink Include="@(_WebAssemblyBCLAssembly)" />
      <_BlazorAssemblyToLink Include="@(_BlazorRuntimeCopyLocalItems)" Condition="'%(_BlazorRuntimeCopyLocalItems.IsLinkable)' == 'true'" />

      <_BlazorLinkerRoot Include="@(IntermediateAssembly)" />
      <_BlazorLinkerRoot Include="@(_BlazorUserRuntimeAssembly)" />
      <_BlazorLinkerRoot Include="@(_BlazorRuntimeCopyLocalItems)" Condition="'%(_BlazorRuntimeCopyLocalItems.IsLinkable)' != 'true'" />
    </ItemGroup>

    <!-- When specifically requested, include the linker substitutions file that strips out collation information.-->
    <PropertyGroup Condition="'$(BlazorWebAssemblyPreserveCollationData)' == 'false'">
      <AdditionalMonoLinkerOptions>$(AdditionalMonoLinkerOptions) --substitutions "$(_BlazorCollationLinkerDescriptor)"</AdditionalMonoLinkerOptions>
    </PropertyGroup>
  </Target>

  <UsingTask TaskName="BlazorCreateRootDescriptorFile" AssemblyFile="$(_BlazorTasksPath)" />
  <Target Name="_GenerateBlazorLinkerDescriptor"
          Inputs="@(IntermediateAssembly)"
          Outputs="$(_GeneratedBlazorLinkerDescriptor)">

    <!-- Generate linker descriptors if the project doesn't explicitly provide one. -->

    <BlazorCreateRootDescriptorFile
      AssemblyNames="@(IntermediateAssembly->'%(Filename)')"
      RootDescriptorFilePath="$(_GeneratedBlazorLinkerDescriptor)" />

    <ItemGroup>
      <FileWrites Include="$(_GeneratedBlazorLinkerDescriptor)" />
      <BlazorLinkerDescriptor Include="$(_GeneratedBlazorLinkerDescriptor)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateTypeGranularityLinkingConfig" AssemblyFile="$(_BlazorTasksPath)" />
  <Target Name="_GenerateTypeGranularLinkerDescriptor"
          Inputs="@(_BlazorAssemblyToLink->WithMetadataValue('TypeGranularity', 'true'))"
          Outputs="$(_TypeGranularityLinkerDescriptor)">

    <GenerateTypeGranularityLinkingConfig
      Assemblies="@(_BlazorAssemblyToLink->WithMetadataValue('TypeGranularity', 'true'))"
      OutputPath="$(_TypeGranularityLinkerDescriptor)" />

    <ItemGroup>
      <BlazorLinkerDescriptor Include="$(_TypeGranularityLinkerDescriptor)" />
      <FileWrites Include="$(_TypeGranularityLinkerDescriptor)" />
    </ItemGroup>
  </Target>

  <!--
    Note that the VS-specific condition below is a workaround for https://github.com/dotnet/aspnetcore/issues/19822
    For more details, see https://github.com/dotnet/aspnetcore/issues/20413
  -->
  <UsingTask TaskName="BlazorILLink" AssemblyFile="$(_BlazorTasksPath)" />
  <Target
      Name="_LinkBlazorApplication"
      Inputs="$(ProjectAssetsFile);
              @(_BlazorManagedRuntimeAssembly);
              @(BlazorLinkerDescriptor);
              $(MSBuildAllProjects)"
      Outputs="$(_BlazorLinkerOutputCache)"
      Condition="'$(BuildingInsideVisualStudio)' != 'true' OR '$(DeployOnBuild)' != 'true'">

    <PropertyGroup>
      <_BlazorLinkerAdditionalOptions>-l $(BlazorWebAssemblyI18NAssemblies) $(AdditionalMonoLinkerOptions)</_BlazorLinkerAdditionalOptions>
    </PropertyGroup>

    <ItemGroup>
      <_OldLinkedFile Include="$(_BlazorIntermediateLinkerOutputPath)*.dll" />
      <_OldLinkedFile Include="$(_BlazorIntermediateLinkerOutputPath)*.pdb" />
    </ItemGroup>

    <Delete Files="@(_OldLinkedFile)" />

    <BlazorILLink
        ILLinkPath="$(ComponentsWebAssemblyLinkerPath)"
        AssemblyPaths="@(_BlazorAssemblyToLink)"
        RootAssemblyNames="@(_BlazorLinkerRoot)"
        RootDescriptorFiles="@(BlazorLinkerDescriptor)"
        OutputDirectory="$(_BlazorIntermediateLinkerOutputPath)"
        ExtraArgs="$(_BlazorLinkerAdditionalOptions)"
        ToolExe="$(_DotNetHostFileName)"
        ToolPath="$(_DotNetHostDirectory)" />

    <ItemGroup>
      <_LinkerResult Include="$(_BlazorIntermediateLinkerOutputPath)*.dll" />
      <_LinkerResult Include="$(_BlazorIntermediateLinkerOutputPath)*.pdb" />
    </ItemGroup>

    <WriteLinesToFile File="$(_BlazorLinkerOutputCache)" Lines="@(_LinkerResult)" Overwrite="true" />
  </Target>

  <UsingTask TaskName="ResolveBlazorRuntimeDependencies" AssemblyFile="$(_BlazorTasksPath)" />
  <Target
    Name="_ResolveBlazorOutputsWhenNotLinked"
    DependsOnTargets="_ResolveBlazorRuntimeDependencies"
    Condition="'$(BlazorWebAssemblyEnableLinking)' != 'true'">

    <ReadLinesFromFile File="$(_BlazorApplicationAssembliesCacheFile)" Condition="'@(_BlazorResolvedAssembly->Count())' == '0'">
      <Output TaskParameter="Lines" ItemName="_BlazorResolvedAssembly"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <!--
        Workaround for https://github.com/dotnet/aspnetcore/issues/19926. Add _BlazorResolvedAssembly to FileWrites so that these files
        do not get removed during an incremental build. Note that we add these files here as opposed to _ResolveBlazorRuntimeDependencies
        since the task that calculates these items in _ResolveBlazorRuntimeDependencies does not execute in incremental builds.
       -->
      <FileWrites Include="$(_BlazorResolvedAssembly)"/>
    </ItemGroup>
  </Target>

  <Target
    Name="_ResolveBlazorRuntimeDependencies"
    Inputs="$(ProjectAssetsFile);
            @(IntermediateAssembly);
            @(_BlazorManagedRuntimeAssembly)"
    Outputs="$(_BlazorApplicationAssembliesCacheFile)">

    <!--
    At this point we have decided not to run the linker and instead to just copy the assemblies
    from the BCL referenced by the app the nuget package into the _framework/_bin folder.
    The only thing we need to do here is collect the list of items that will go into _framework/_bin.
    -->
    <ResolveBlazorRuntimeDependencies
      EntryPoint="@(IntermediateAssembly)"
      ApplicationDependencies="@(_BlazorManagedRuntimeAssembly)"
      WebAssemblyBCLAssemblies="@(_WebAssemblyBCLAssembly)">

      <Output TaskParameter="Dependencies" ItemName="_BlazorResolvedAssemblyUnlinked" />
    </ResolveBlazorRuntimeDependencies>

    <ItemGroup Condition="'$(BlazorWebAssemblyI18NAssemblies)' != 'none'">
      <!--
        Unless the user has asked for no-assemblies, copy all I18N assemblies to the build output.
        We do not want to decipher the linker's format for passing in I18N options in our build targets
      -->
      <_BlazorResolvedAssemblyUnlinked Include="$(ComponentsWebAssemblyBaseClassLibraryPath)I18N*.dll" />
    </ItemGroup>

    <!--
    Workaround for https://github.com/dotnet/aspnetcore/issues/19926. Using the files from their initial locations
    as-is causes RazorSDK to remove files from a hosted app's publish directory. This is because files being removed
    are looked up by their path. We'll copy files to an intermediate location to avoid the removal code.
    -->
    <Copy
      SourceFiles="@(_BlazorResolvedAssemblyUnlinked)"
      DestinationFolder="$(_BlazorIntermediateOutputPath)unlinked">
        <Output TaskParameter="CopiedFiles" ItemName="_BlazorResolvedAssembly" />
    </Copy>

    <WriteLinesToFile File="$(_BlazorApplicationAssembliesCacheFile)" Lines="@(_BlazorResolvedAssembly)" Overwrite="true" />

    <ItemGroup>
      <FileWrites Include="$(_BlazorApplicationAssembliesCacheFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_GenerateBlazorBootJsonInputHash">
    <ItemGroup>
      <_BlazorBootJsonHashInput Include="@(IntermediateAssembly)" />
      <_BlazorBootJsonHashInput Include="@(_BlazorOutputWithTargetPath)" />
      <_BlazorBootJsonHashInput Include="@(_BlazorConfigFile)" />
    </ItemGroup>

    <Hash ItemsToHash="@(_BlazorBootJsonHashInput)">
      <Output TaskParameter="HashResult" PropertyName="_BlazorBootJsonInputHash" />
    </Hash>

    <PropertyGroup>
      <_BlazorBootJsonInputHashFile>$(_BlazorIntermediateOutputPath)boot.json.input</_BlazorBootJsonInputHashFile>
    </PropertyGroup>

    <WriteLinesToFile
      Lines="$(_BlazorBootJsonInputHash)"
      File="$(_BlazorBootJsonInputHashFile)"
      Overwrite="True"
      WriteOnlyWhenDifferent="True" />

  </Target>

  <UsingTask TaskName="GenerateBlazorBootJson" AssemblyFile="$(_BlazorTasksPath)" />

  <Target
    Name="_GenerateBlazorBootJson"
    DependsOnTargets="_GenerateBlazorBootJsonInputHash"
    Inputs="$(MSBuildAllProjects);@(_BlazorOutputWithTargetPath);$(_BlazorBootJsonInputHashFile)"
    Outputs="$(_BlazorBootJsonIntermediateOutputPath)">

    <PropertyGroup>
      <_IsDebugBuild>false</_IsDebugBuild>
      <_IsDebugBuild Condition="'$(Configuration)' == 'Debug'">true</_IsDebugBuild>
      <BlazorCacheBootResources Condition="'$(BlazorCacheBootResources)' == ''">true</BlazorCacheBootResources>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorBootResource Include="@(_BlazorOutputWithTargetPath->HasMetadata('BootManifestResourceType'))" />
    </ItemGroup>

    <GenerateBlazorBootJson
      AssemblyPath="@(IntermediateAssembly)"
      Resources="@(_BlazorBootResource)"
      DebugBuild="$(_IsDebugBuild)"
      LinkerEnabled="$(BlazorWebAssemblyEnableLinking)"
      CacheBootResources="$(BlazorCacheBootResources)"
      OutputPath="$(_BlazorBootJsonIntermediateOutputPath)"
      ConfigurationFiles="@(_BlazorConfigFile)" />

  </Target>

  <Target Name="_GenerateBlazorBootJsonIntegrity">

    <GetFileHash Files="$(_BlazorBootJsonIntermediateOutputPath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorBootJsonWithHash" />
    </GetFileHash>

    <ItemGroup>

      <_BlazorBootJsonWithIntegrity Include="@(_BlazorBootJsonWithHash)">
        <Integrity>%(FileHash)</Integrity>
        <IntegrityFile>$(IntermediateOutputPath)integrity\$([System.String]::Copy('%(FileHash)').Replace('/','-').Replace('+','_')).hash</IntegrityFile>
      </_BlazorBootJsonWithIntegrity>

      <_BlazorOutputWithTargetPath Include="@(_BlazorBootJsonWithIntegrity)" RemoveMetadata="FileHash;FileHashAlgorithm">
        <TargetOutputPath>$(_BaseBlazorRuntimeOutputPath)$(_BlazorBootJsonName)</TargetOutputPath>
      </_BlazorOutputWithTargetPath>

      <FileWrites Include="$(_BlazorBootJsonIntermediateOutputPath)" />
      <FileWrites Include="%(_BlazorBootJsonWithIntegrity.IntegrityFile)" />

    </ItemGroup>

    <WriteLinesToFile Lines="%(_BlazorBootJsonWithIntegrity.Integrity)" File="%(_BlazorBootJsonWithIntegrity.IntegrityFile)" WriteOnlyWhenDifferent="true" Overwrite="true" />

  </Target>

</Project>
